(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{216:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"linux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linux","aria-hidden":"true"}},[t._v("#")]),t._v(" Linux")]),t._v(" "),n("h2",{attrs:{id:"concepts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concepts","aria-hidden":"true"}},[t._v("#")]),t._v(" Concepts")]),t._v(" "),n("ul",[n("li",[t._v("ssh")])]),t._v(" "),n("h2",{attrs:{id:"commands"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commands","aria-hidden":"true"}},[t._v("#")]),t._v(" Commands")]),t._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global color.ui auto\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alxetd@gmail.com"')]),t._v("\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Eduard Trandafir"')]),t._v("\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --branch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag_name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repo_url"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --depth DEPTH --single-branch --branch BRANCH REPO_URL\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d BRANCH\tThe -d option is an "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" --delete, "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" only deletes the branch "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" it has already been fully merged "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" its upstream branch. \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D BRANCH\tIs an "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" --delete --force, "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" deletes the branch "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"irrespective of its merged status."')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete BRANCH\tDeletes a remote branch\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin git://new.url.here\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~1\terases your last commit\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD~1\tThis will undo the "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("most")]),t._v(" recent commit.\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD~2\treset back "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" than one commit by changing the number after ~\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^\tSince we don"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t specify \"--hard\", files stay in working directory\ngit reset --hard origin/master\t\ngit clean -n\tShow what will be deleted\ngit clean -f\tRemove untracked files\ngit clean -f -d\tRemove directories\ngit clean -f -X\tRemove ignored files\ngit clean -f -x\tremove ignored and non-ignored files\ngit pull\t\ngit config --get remote.origin.url\tIf referential integrity has been broken\ngit remote show origin\tIf referential integrity is intact\ngit remote set-url origin git@bitbucket.org:alxetd_dev/alxetd.git\t\ngit init --bare fooproject.git\tcreates a new directory called fooproject.git that contains all of the git objects.\ngit tag\t\ngit tag -a <version>\t\ngit push origin <tag_name>\t\ngit push --tags\t\ngit remote rename origin drupal\t \ngit remote add origin path/to/your/central/git/repo\t\ngit remote add upstream path/to/your/central/git/repo\t\ngit remote\t\ngit remote -v\tShows origin\ngit fetch --prune\tdeleting the refs to the branches that don'")]),t._v("t exist on the remote\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i HEAD~3\tInteractive mode. Commit to replay onto. Pops up an editor with the rebase script.\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\t\n\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline --all --decorate\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\t\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout branch\ngit rebase master\ngit checkout master\ngit merge branch"')]),t._v("\tThis will result "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a fast farword merge.\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\tCreates a new branch and moves to it.\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\tresets all uncommitted code\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\tStashing is like saving a temporary "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" commit to your branch. It is not possible to push a stash to a remote repository, so a stash is just "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" your own personal use.\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\tList stashes\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply\tReapply the stashed content\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply stash@"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\tYou can also apply a specific stash "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if you have stashed "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" than once"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" by running\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\tremove all stashes\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" drop stash@"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\tYou can remove stashes individually\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\tshow the commit itself\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" bisect start\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" bisect good "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" bisect bad\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" bisect reset\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --patch "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \t// Better yet, review changes and stage your hunks.\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --cached \t// Shows what is about to be committed. Review it carefully"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline --reverse --first-parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("insert last tag version here"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -c "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("-\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin HEAD\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin HEAD -f\tPush "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" changes to origin\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\t\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br")])]),n("h2",{attrs:{id:"others"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#others","aria-hidden":"true"}},[t._v("#")]),t._v(" Others")]),t._v(" "),n("p",[t._v("A merge preserves the branch history\nA rebase does not preserve the branch history\nA merge is useful for combining branches that are already public.\nA rebase is for combining private branches, never public.\nMerging and rebasing are about integrating new work, new commits that are on separate branches.\nMerging is called a three-way merge.\nRebase is pretending that the work on the feature branch was directly done on the base branch. It takes all the commits from a particular feature branch and places them on to the base branch.")]),t._v(" "),n("p",[t._v("git stash, which makes a temporary, local save of your code\ngit reset, which lets you tidy up your code before doing a commit\ngit bisect, a function that allows you to hunt out bad commits\ngit squash, which allows you to combine your commits\ngit rebase, which allows for applying changes from one branch onto another")]),t._v(" "),n("p",[t._v("code must be staged to be stashed")])])}),[],!1,null,null,null);s.default=e.exports}}]);