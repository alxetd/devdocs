(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{221:function(e,i,t){"use strict";t.r(i);var n=t(0),r=Object(n.a)({},(function(){var e=this,i=e.$createElement,t=e._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#architecture","aria-hidden":"true"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),t("h2",{attrs:{id:"solid-principles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solid-principles","aria-hidden":"true"}},[e._v("#")]),e._v(" SOLID Principles")]),e._v(" "),t("p",[e._v("The purpose of SOLID design principles")]),e._v(" "),t("ul",[t("li",[e._v("To make to code more maintainable.")]),e._v(" "),t("li",[e._v("To make it easier to quickly extend the system with new functionality without breaking the existing ones.")]),e._v(" "),t("li",[e._v("To make the code easier to read and understand, thus spend less time figuring out what it does and more time actually developing the solution.")])]),e._v(" "),t("h3",{attrs:{id:"s-—-single-responsibility-principle-wiki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#s-—-single-responsibility-principle-wiki","aria-hidden":"true"}},[e._v("#")]),e._v(" S — Single responsibility principle "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Single_responsibility_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("A class should only be responsible for one thing.")]),e._v(" "),t("li",[e._v("There's a place for everything and everything is in its place.")]),e._v(" "),t("li",[e._v("Find one reason to change and take everything out of the class.")]),e._v(" "),t("li",[e._v("Very precise names for many small classes > generic names for large classes.")])]),e._v(" "),t("h3",{attrs:{id:"o-—-open-closed-principle-wiki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#o-—-open-closed-principle-wiki","aria-hidden":"true"}},[e._v("#")]),e._v(" O — Open/closed principle "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("An entity should be open for extension but closed for modification.")]),e._v(" "),t("li",[e._v("Extend functionality by adding new code instead of changing the existing one.")]),e._v(" "),t("li",[e._v("Separate the behaviors, so the system can easily be extended, but never broken.")])]),e._v(" "),t("h3",{attrs:{id:"l-—-liskov-substitution-principle-wiki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#l-—-liskov-substitution-principle-wiki","aria-hidden":"true"}},[e._v("#")]),e._v(" L — Liskov substitution principle "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Liskov_substitution_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("Any derived class should be able to substitute his its parent class without the consumer knowing it.")]),e._v(" "),t("li",[e._v("Every class that implements an interface, must be able to substitute any reference throughout the code that implements that same interface.")]),e._v(" "),t("li",[e._v("Every part of the code should get the expected result no matter what instance of a class you send to it, given it implements the same interface.")])]),e._v(" "),t("h3",{attrs:{id:"i-—-interface-segregation-principle-wiki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-—-interface-segregation-principle-wiki","aria-hidden":"true"}},[e._v("#")]),e._v(" I — Interface segregation principle "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Interface_segregation_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("A client should never be forced to depend on methods it doesn't use.")]),e._v(" "),t("li",[e._v("Or, a client should never depend on anything more than the method it's calling.")]),e._v(" "),t("li",[e._v("Changing one method in a class shouldn't affect classes that don't depend on it.")]),e._v(" "),t("li",[e._v("Replace fat interfaces with many small, specific interfaces.")])]),e._v(" "),t("h3",{attrs:{id:"d-dependency-inversion-principle-wiki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#d-dependency-inversion-principle-wiki","aria-hidden":"true"}},[e._v("#")]),e._v(" D - Dependency inversion principle "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dependency_inversion_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("Never depend on anything concrete, only depend on abstractions.")]),e._v(" "),t("li",[e._v("High level modules should not depend on low level modules. They should depend on abstractions.")]),e._v(" "),t("li",[e._v("Able to change an implementation easily without altering the high level code.")])]),e._v(" "),t("h2",{attrs:{id:"test-driven-development-tdd-wiki"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#test-driven-development-tdd-wiki","aria-hidden":"true"}},[e._v("#")]),e._v(" Test-driven development (TDD) "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Test-driven_development",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),t("OutboundLink")],1)])])}),[],!1,null,null,null);i.default=r.exports}}]);